########################################
####      General Utilities           ##
########################################

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

update_clock () {
    echo '[ROOT] Updating clock (sudo hwclock --hctosys)'
    sudo hwclock -s
    sudo ntpdate time.windows.com
}






########################################
####       Environment Management     ##
########################################

set_environment(){
    # 1. Function definition
    if [ $# -eq 1 ]; then
        # 2. Check if exactly one argument is provided
        env_file_path=$1
        # 3. Assign the first argument to env_file_path
        echo "Setting Environment Variables:"
        # 4. Print a message
        while IFS= read -r line || [[ -n "$line" ]]; do
            # 5. Read file line by line, handling last line without newline
            if [[ ! "$line" =~ ^\# && -n "$line" ]]; then
                # 6. Skip comments and empty lines
                key=$(echo "$line" | cut -d'=' -f1)
                # 7. Extract the key (part before =)
                value=$(echo "$line" | cut -d'=' -f2-)
                # 8. Extract the value (part after =)
                expanded_value=$(eval echo "$value")
                # 9. Expand any variables in the value
                export "$key=$expanded_value"
                # 10. Export the key-value pair
                echo "$key"
                # 11. Print the key that was set
            fi
        done < "$env_file_path"
        # 12. Specify the file to read from
    else
        echo "Bad input args. Please specify a SINGLE path to a .env file"
        return 1
        # 13. Error handling for incorrect number of arguments
    fi
    echo ""
    # 14. Print a blank line at the end
}


unset_environment(){
    # takes path to env file
    if [ $# -eq 1 ]; then
        env_file_path=$1
        echo "Unsetting Environment Variables:"
        unset $(grep -v '^#' ${env_file_path} | awk 'BEGIN { FS = "=" } ; { print $1 }')
        echo "$(grep -v '^#' ${env_file_path}| awk 'BEGIN { FS = "=" } ; { print $1 }')"
    else
        echo "Bad input args. Please specify a SINGLE path to a .env file"
        return 1
    fi
}


########################################
####           SSH Management         ##
########################################
set_ssh(){
    # TODO: improvements for a future time
    # - accept an arg for the epiration length
    # - check env for default socket env var

    echo "Checking for existing SSH Agent..."
    # The socket used for ssh persistence
    SSH_AUTH_SOCK="$HOME/.ssh/ssh-agent.sock"

    # Check if ssh-agent exists
    runcount=$(ps -ef | grep "ssh-agent" | grep -v "grep" | wc -l)
    if [ $runcount -eq 0 ]; then   
        echo "- Cannot find an SSH Agent. Starting one now."
        #no ssh-agent running
        if [ -S $SSH_AUTH_SOCK ]; then
            echo "- Removing stale SSH Socket"
            rm "$SSH_AUTH_SOCK"
        fi
        eval "$(ssh-agent -s -a "$SSH_AUTH_SOCK")"
    else
        #ssh-agent already running, grab PID
        echo "- Found existing SSH Agent."
        SSH_AGENT_PID="$(pidof ssh-agent)"
    fi
    #set ENV vars for persistence
    export SSH_AGENT_PID
    export SSH_AUTH_SOCK

    # check for existing keys
    echo "Checking for existing SSH keys..."
    # agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2=agent not running
    agent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)
    if [ $agent_run_state -eq 1 ]; then
        #no keys exist
        echo "- No keys found. Adding SHH keys now"
        ssh-add -t 1d
    elif [ $agent_run_state -eq 0 ]; then
        #keys exist
        echo "- Found existing SSH keys."
    fi    
    echo "SSH Credentials are ready to go."
}

unset_ssh() {
    
    if [ -f "$SSH_AUTH_SOCK" ]; then
        rm "$SSH_AUTH_SOCK"
    fi
    # - sometimes this is needed for a true reset
    DEFAULT_SOCK_FILE=~/.ssh/ssh-agent.sock
    if [ -f $DEFAULT_SOCK_FILE ]; then
        rm "$DEFAULT_SOCK_FILE"
    fi

    #kills all ssh-agents including orphans
    #resets ssh state for bash setup to a known state
    killall ssh-agent

}   


####################################
#         Docker Management        #
####################################

start_docker_if_wsl() {
    if grep -q "microsoft" /proc/version > /dev/null 2>&1; then
        if service docker status 2>&1 | grep -q "is not running"; then
            wsl.exe --distribution "${WSL_DISTRO_NAME}" --user root \
                --exec /usr/sbin/service docker start > /dev/null 2>&1
        fi
    fi
}
